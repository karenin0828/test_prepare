import heapq
import sys

input= sys.stdin.readline
INF= int(1e9)

n,m,start= map(int, input().split())

graph= [[] for i in range(n+1) ]
distance= [INF]*(n+1)

for _ in range(m):
  x,y,z= map(int, input().split())
  graph[x].append((y,z))

def dijkstra(start):
  q= []
  heapq.heappush(q, (0, start))
  distance[start]= 0
  while q:
    dist, now= heapq.heappop(q)
    if distance[now]< dist:
      continue
    for i in graph[now]:
      cost= dist+ i[1]
      if cost< distance[i[0]]:
        distance[i[0]] = cost
        heapq.heappush(q, (cost, i[0]))

dijkstra(start)

count=0
max_distance=0

for d in distance:
  if d!= INF:
    count+=1
    max_distance= max(max_distance, d)

print(count-1, max_distance)


###

1. n과 m이 10만처럼 클때는 플로이드 워셜을 이용하면 안된다. 시간 초과가 발생할 것이다.
플로이드 워셜에 해당하는 문제를 보면 n, m의 범위제한이 100이었다

2. 시작노드를 대놓고 준 것에서 다익스트라 라는 걸 알 수 있었다

3. 디엑스트라는 시작노드도 입력 받는다는 걸 기억하자
