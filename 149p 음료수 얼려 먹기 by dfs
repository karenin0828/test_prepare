n, m= map(int, input().split())

graph= []
for i in range(n):
    graph.append(list(map(int, input())))

def dfs(x,y):
    if x<=-1 or x>=n or y<=-1 or y>=m:
        return False

    if graph[x][y]==0:
        graph[x][y]= 1
        dfs(x-1, y)
        dfs(x, y-1)
        dfs(x+1, y)
        dfs(x, y+1)
        return True
    return False

result= 0
for i in range(n):
    for j in range(m):
        if dfs(i, j)== True:
            result+= 1

prit(result)

1. dfs는 스택을 이용하고 bfs는 큐를 이용한다. 둘다 append를 이용하지만 스택은 pop 큐는 popleft를 이용한다.
스택은 stack=[]를 만들고 stack.append로 붙인다.
큐는 queue= deque()를 만들고 queue.append와 같은 형식으로 붙인다. 
---> 이 문제는 dfs를 이용하니까 위의 내용을 잘 생각해보길

2. 2차원 화살표(그래프)를 이용하기 위해 행렬을 이용하는데 입력을 한줄씩 받는다. 

3. 행렬의 특정원소를 선택할 때에는 graph[][]와 같은 형식으로 선택하면 된다.

4. 처음 0인 부분만 true로 만들고 그 주위는 다 false가 되게 바꾸는 방식이다.

5. i와 j의 for반복문 중첩은 모든 원소를 다 선택하는 방법이다.

6.      dfs(x-1, y)
        dfs(x, y-1)
        dfs(x+1, y)
        dfs(x, y+1)
        return True
        
        이 부분에서 
        False
        True
        False
        False
        return True
        처럼 되어도 중간에 있는 true나 false는 return True라는 결과에 영향을 주지 않으니 상관 없는 것인듯..
        
 #7 상하좌우에 대해서 호출되는 내용들은 리턴값을 사용하지 않기때문에 단순히 연결된 노드들을 방문처리 해주기 위한 목적이다.
      
