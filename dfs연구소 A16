import sys



n,m=map(int,sys.stdin.readline().split())
graph=[]
for i in range(n):
  graph.append(list(map(int,sys.stdin.readline().split())))
temp=[[0]*m for i in range(n)]

#벽을 dfs로 어떻게 세울지부터 파악해보자
dx = [-1,0,1,0]
dy = [0,-1,0,1]

result=0

def virus(x,y):
  for i in range(4):
    nx=x+dx[i]
    ny=y+dy[i]
    if nx>=0 and nx<n and ny>=0 and ny<m:
      if temp[nx][ny]==0:
        temp[nx][ny]=2
        virus(nx,ny)

def get_score():
  score=0
  for i in range(n):
    for j in range(m):
      if temp[i][j]==0:
        score+=1
  return score


def wall(count):
  global result
  
  if count==3:
    for i in range(n):
      for j in range(m):
        temp[i][j]=graph[i][j]
    for i in range(n):
      for j in range(m):
        if temp[i][j]==2:
          virus(i,j)
    result=max(result, get_score())
    return 
  
  for i in range(n):
    for j in range(m):
      if graph[i][j]==0:
        graph[i][j]=1
        count+=1
        wall(count)
        graph[i][j]=0
        count-=1

#바이러스를 어떻게 퍼트릴지 생각해보자

#어느 지점 x,y를 기준으로 그 주변을 탐색할때는 dx dy이용하자

wall(0)
print(result)

1. #어느 지점 x,y를 기준으로 그 주변을 탐색할때는 dx dy이용하자

2. 랜덤한 곳에 벽을 3개 세울때처럼 모든 경우를 탐색할 때 dfs를 이용할 수 있음을 기억하자

3. wall함수에서 count를 매개변수로 받는건 다 이유가 있다. 더해진 count를 넣는게 방문처리 해주는 것과 비슷하다?
