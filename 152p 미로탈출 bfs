from collections import deque

n, m= map(int, input().split())

graph=[]
for i in range(n):
    graph.append(list(map(int, input())))

dx= [-1, 1, 0, 0]
dy= [0, 0, -1, 1]


def bfs(x, y):
    queue= deque()
    queue.append((x,y))

    
    while queue:
        x,y= queue.popleft()
        for i in range(4):
            nx= x+ dx[i]
            ny= y+ dy[i]

            if nx<0 or nx>=n or ny<0 or ny>= m:
                continue
            if graph[nx][ny]==0:
                continue
            if graph[nx][ny]==1:
                graph[nx][ny]= graph[x][y]+1
                queue.append((nx,ny))
    return graph[n-1][m-1]

print(bfs(0,0))

1. 그래프 입력받을 때 list 쓰는 것 잊지말기

2. bfs는 간선의 비용이 모두 같을 때 최단거리를 탐색하기 위해 사용할 수 있는 알고리즘이다.

3. 처음에 while queue에서 x, y를 꺼내는 이유는 현재 위치 기준으로 상하좌우를 확인해야 하기 때문이다.

