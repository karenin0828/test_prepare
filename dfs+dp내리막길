import sys
input=sys.stdin.readline
m,n=map(int, input().split())
graph=[list(map(int, input().split())) for _ in range(m)]
dp=[[-1]*n for _ in range(m)]

dx=[1,-1,0,0]
dy=[0,0,1,-1]

def dfs(x,y):
  if x==m-1 and y==n-1:
    return 1
  if dp[x][y]!=-1:
    return dp[x][y]
  dp[x][y]=0
    
  for i in range(4):
    nx=x+dx[i]
    ny=y+dy[i]
    if nx<0 or nx>=m or ny<0 or ny>=n:
      continue
    if graph[nx][ny]<graph[x][y]:
      dp[x][y]+=dfs(nx,ny)
  return dp[x][y]

print(dfs(0,0))

1. 하향식 dp문제이다. dfs와 결합한=>재귀함수를 이용하여 dp코드를 작성하는 방법을 탑다운이라고 한단다
2. -1은 방문하지 않았다는 의미
3. dp[x][y]는 x,y에서 종점까지 가능한 개수가 몇개인지
4. dfs(0,0)
   print(dp[m-1][n-1])이 안되는 이유에 대해서 고민중
   
   이해하기 어려운 점을 이해합니다. 이는 프로그래밍 언어의 특징과 컴퓨터 아키텍처의 특성을 이해해야 하는 복잡한 문제입니다.
   일반적으로, 코드는 위에서 아래로, 왼쪽에서 오른쪽으로 실행됩니다. 그러나 재귀적 함수 호출과 같은 복잡한 구조에서는 이러한
   일반적인 규칙이 항상 적용되지 않습니다.
여기서 핵심은 dfs(0,0)이 아직 완전히 완료되지 않았는데 print(dp[m-1][n-1])가 실행되는 것입니다.

5. 기본적인 top-down 피보나치 코드와 비교해보셈
d=[0]*100

def pibo(x):
  d[1]=1
  d[2]=1
  
  if d[x]!=0:
    return d[x]
  d[x]=pibo(x-1)+pibo(x-2)
  return d[x]

print(pibo(4))
  
