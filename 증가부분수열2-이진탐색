n=int(input())

graph=list(map(int, input().split()))


mylist=[graph[0]]


def find(number):
  start=0
  end=len(mylist)-1
  while start<=end:
    middle=(start+end)//2
    if mylist[middle]==number:
      return middle
    elif number<mylist[middle]:
      end=middle-1
    else:
      start=middle+1
  return start
      
      
      
for i in range(1,n):
  if graph[i]>mylist[-1]:
    mylist.append(graph[i])
    continue
  index=find(graph[i])
  mylist[index]=graph[i]

print(len(mylist))
 

1.아이디어는 가장 길~~게 연결될 수 있는 새로운 리스트 mylist를 만드는 것.
주어진 리스트의 원소들을 탐색하면서 mylist의 마지막 원소보다 크다면 그냥 넣어주고
작다면 mylist에서 원소보단 크면서 가장 왼쪽에 있는걸 찾아주고 바꿔준다. 그러면 
바뀐 원소로 인해서 더 긴 mylist를 만들 수 있으니까

2. 이때 이를 찾기 위해서 이진탐색을 이용하는데
"""
e가 중간값보다 크다면, 'start'는 중간값의 오른쪽으로 이동합니다. 이때 'start'의 왼쪽에는 모두 e보다 작은 값들만 있게 됩니다.
e가 중간값보다 작다면, 'end'는 중간값의 왼쪽으로 이동합니다. 이때 'end'의 오른쪽에는 모두 e보다 큰 값들만 있게 됩니다.
마지막에 start=end+1이 되니까 start의 값은 e보다 큰 값들 중 가장 작은 값의 인덱스이다. """
이래서 start를 리턴해 주는거임. 이진탐색은 여러 형태로 변형될 수 있음을 알자
