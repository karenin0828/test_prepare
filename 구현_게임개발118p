n, m= map(int, input().split())
#d는 처음가는 공간인지를 확인하기 위해서 만든 것이다.
d= [[0]*m for _ in range(n)]

x, y, direction= map(int, input().split())
#이미 가본 공간은 1로 표현하기!
d[x][y] = 1

#2차원 공간을 만들때는 리스트 안의 리스트를 이용한다.
array= []
for i in range(n):
    array.append(list(map(int, input().split())))

dx= [-1, 0, 1, 0] #북동남서
dy= [0, 1, 0, -1]

def turn_left():
    global direction
    direction-= 1
    if direction==-1:
        direction= 3

count= 1
turn_time= 0
while True:
    #
    turn_left()
    nx= x+dx[direction]
    ny= y+dy[direction]
    #
    if d[nx][ny]==0 and array[nx][ny]==0:
        d[nx][ny]= 1
        x=nx
        y=ny
        count+=1
        turn_time=0

    else:
        turn_time+= 1
    if turn_time==4:
        nx= x-dx[direction]
        ny= y-dy[direction]

        if array[nx][ny]==0:
            x=nx
            y=ny
        else:
            break
        turn_time=0

print(count)



1. 2차원 공간을 만들때는 리스트 안의 리스트를 이용한다.
이떄 리스트 컴프리헨션을 이용하면 간단하게 작성 가능하다.

2. 확인해야 할 큰 줄기는 두가지이다. 하나는 내가 가본 공간인지, 다른 하나는
육지인지 바다인지. 전자를 판단하기 위해서 d라는 2차원 리스트를 만들고
후자를 판단하기 위해서 array라는 2차원 리스트를 만든다.

3. 0 1 2 3으로 주어져있는 방향정보를 어떻게 활용해야 할지 갈피를 잡지 못했다.
가상의 로봇을 상상해서 진짜로 몸이 돌아간다고 생각하지 말고, 그 방향으로 전진한다고만
생각하자. *방향을 설정해서 이동하는 문제에서는 dx, dy를 선언해서 움직이는 것이 유리한다
여기에서 0 1 2 3이라는 방향정보를 인덱스처럼 활용해 써먹을 수 있다.

